{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation AWS Fault Injection Simulator Demo Template creates a VPC, 2 public subnets and adds 11 EC2 instances with a security group, 2 CloudWatch Alarms, IAM Roles. **WARNING** This template creates 11 Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {
    "SSMImageId": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    },
    "KeyName": {
        "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription" : "must be the name of an existing EC2 KeyPair.",
        "Default": "californiaKeyRohini"
      },
      
      "SSHLocation" : {
        "Description" : " The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Tags": [{ "Key": "Purpose", "Value": "ChaosDemo" }]
      }
    },

    "Subnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [{ "Key": "Purpose", "Value": "ChaosDemo" }]
      }
    },

    "Subnet02": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [{ "Key": "Purpose", "Value": "ChaosDemo" }]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Purpose", "Value": "ChaosDemo" }]
      }
    },

    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Purpose", "Value": "ChaosDemo" }]
      }
    },

    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },

    "Subnet01RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet01" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "Subnet02RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet02" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },

    "PublicEC2Instance01": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",
        "SubnetId": { "Ref": "Subnet01" },
        "ImageId": { "Ref": "SSMImageId" },
        "Tags": [
          {
            "Key": "Experiment",
            "Value": "ChaosReady"
          }, { "Key": "Purpose", "Value": "ChaosDemo" }
        ]
      }
    },
    "PublicEC2Instance02": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet01" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance03": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet01" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance04": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet01" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance05": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet01" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance06": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet02" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance07": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet02" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance08": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet02" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance09": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet02" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "PublicEC2Instance10": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet02" },
          "ImageId": { "Ref": "SSMImageId" },
          "Tags": [
            {
              "Key": "Experiment",
              "Value": "ChaosReady"
            },{ "Key": "Purpose", "Value": "ChaosDemo" }
          ]
        }
      },
      "EC2Instance": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": "t2.micro",
          "SubnetId": { "Ref": "Subnet02" },
          "ImageId": { "Ref": "SSMImageId" },
          "KeyName" : { "Ref" : "KeyName" },
          "SecurityGroupIds": [{ "Ref" : "InstanceSecurityGroup" }],
          "IamInstanceProfile": { "Ref": "MyInstanceProfile" },
          "Tags": [
            {
              "Key": "Purpose",
              "Value": "ChaosDemo"
            }
          ]
        }
      },
      "InstanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "GroupDescription" : "Enable SSH access via port 22",
          "SecurityGroupIngress" : [
            {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
           ]
        }
      },

      "MyInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
           "Path": "/",
           "Roles": [ {
              "Ref": "SSMRole"
           } ]
        }
     },

     "SSMRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "AmazonSSMManagedInstanceCore",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ssm:*"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ssmmessages:CreateControlChannel",
                      "ssmmessages:CreateDataChannel",
                      "ssmmessages:OpenControlChannel",
                      "ssmmessages:OpenDataChannel"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2messages:AcknowledgeMessage",
                      "ec2messages:DeleteMessage",
                      "ec2messages:FailMessage",
                      "ec2messages:GetEndpoint",
                      "ec2messages:GetMessages",
                      "ec2messages:SendReply"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
    "MyFISExperimentRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "fis.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AmazonSSMManagedInstanceCore",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:DescribeDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameter",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssmmessages:CreateControlChannel",
                    "ssmmessages:CreateDataChannel",
                    "ssmmessages:OpenControlChannel",
                    "ssmmessages:OpenDataChannel"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "EC2FullAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "CWAlarmNetworkInAbnormal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
          "AlarmName": "NetworkInAbnormal",
          "ActionsEnabled": true,
          "OKActions": [],
          "AlarmActions": [],
          "InsufficientDataActions": [],
          "MetricName": "NetworkIn",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Dimensions": [],
          "Period": 300,
          "EvaluationPeriods": 1,
          "DatapointsToAlarm": 1,
          "Threshold": 100,
          "ComparisonOperator": "LessThanOrEqualToThreshold",
          "TreatMissingData": "notBreaching"
      }
  },
  "CWAlarm":
  {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
        "AlarmName": "ChaosDemo-High-CPU-Alarm",
        "ActionsEnabled": true,
        "OKActions": [],
        "AlarmActions": [],
        "InsufficientDataActions": [],
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Dimensions": [
            {
                "Name": "InstanceId",
                "Value": {
                  "Ref": "EC2Instance"
               }
            }
        ],
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "Threshold": 70,
        "ComparisonOperator": "GreaterThanThreshold",
        "TreatMissingData": "notBreaching"
    }
}
  },
  "Outputs" : {
    "Demo4EC2instance" : {
      "Value" : {"Ref" : "EC2Instance" },
      "Description" : "EC2 Instance for Demo 4"
    }
  }

}
